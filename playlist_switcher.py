import os
import re
import spotipy
import pprint
from spotipy.oauth2 import SpotifyOAuth
import json

"""
This script provides the ability to switch, pause, skip through, and list the playlists in a collection of one's Spotify playlists given by a .json
file generated by the script playlist_dict_creator.py.
"""

def find_playlist(playlist_dict: dict, user_input: str, sp: spotipy.Spotify):
    for playlist in playlist_dict:
        if user_input == playlist_dict[playlist]["short name"]: # TEMP
            print(f'\n"{playlist_dict[playlist]["name"]}" is a playlist!\n') #
            sp.shuffle(True)
            sp.start_playback(context_uri=playlist_dict[playlist]["id"])
            # print(playlist_dict.values()) #TEMP
            break
    else:
        print(f'\n"{user_input}" is not a playlist in the included dictionary!\n') #
        return

def driver(playlist_dict: dict, sp: spotipy.Spotify, on = bool): # TODO: Add index/guide for commands
    user_input = input("Input a playlist name (type q to quit): ") #TEMP
    # user_input = "p" #TEMP
    if user_input == "q" or user_input == "quit":
        on = False
        return on
    elif user_input == "p" or user_input == "pause" or user_input == "play":
        playback_info = sp.current_playback() #TEMP
        if not playback_info['is_playing']:
            sp.start_playback()
        else:
            sp.pause_playback()
    elif user_input == "n" or user_input == "next":
        playback_info = sp.current_playback()
        if playback_info['is_playing']:
            sp.next_track()
        else:
            print(f'\nPlayback is paused. Cannot skip. \n')
    elif user_input == "ls" or user_input == "list":
        pprint.pprint(playlist_dict)
    else:
        find_playlist(playlist_dict, user_input, sp) # TODO: Implement is_paused functionality -- don't play playlist if the status is set to paused
    return on
    

def main():
    token = SpotifyOAuth(client_id=os.environ.get("SPOTIPY_CLIENT_ID"), client_secret=os.environ.get("SPOTIPY_CLIENT_SECRET"), redirect_uri=os.environ.get("SPOTIPY_REDIRECT_URI"), scope="streaming,user-read-playback-state", username=os.environ.get("SPOTIFY_USERNAME"))
    sp = spotipy.Spotify(auth_manager=token)

    json_file = open("rpgdict.json")
    playlist_dict= json.load(json_file)
    # print(playlist_dict) #

    on = True
    while on:
        on = driver(playlist_dict, sp, on)

if __name__ == "__main__":
    main()
